/**
 * 
 */
package com.in28Minutes.rest.webservices.user;

//import static org.springframework.hateoas.server.mvc.ControllerLinkBuilder.*;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.ControllerLinkBuilder;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

/**
 * @author ayosry
 *
 */
@RestController
public class UserResource
{
	@Autowired
	UserDAOService service;

	/**
	 * Retrieve All Users GET /users
	 */
	@GetMapping("/users")
	public List<User> retrieveAllUsers()
	{
		return service.findAll();
	}

	/**
	 * Retrieve One User GET /users/{id} -> /users/1
	 */
	@GetMapping("users/{id}")
	public User retrieveUser(@PathVariable int id)
	{
		User user = service.findOne(id);

		if (user == null) throw new UserNotFoundException("id-" + id);

		//Retrieve all users link
		//HATAOS
		/* Deprecated
		ControllerLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retrieveAllUsers());
		*/
		EntityModel<User> resource = EntityModel.of(user);
		WebMvcLinkBuilder linkTo = 
				linkTo(methodOn(this.getClass()).retrieveAllUsers());
		resource.add(linkTo.withRel("all-users"));
		
		return user;
	}

	/**
	 * Add New User the return status code CREATED then send the URI of the
	 * created resource into the response
	 * 
	 * @param user
	 * @return
	 */
	@PostMapping("users")
	public ResponseEntity<Object> createUser(@Valid @RequestBody User user)
	{
		User savedUser = service.save(user);
		// get the URI of the created resource
		// /user/{id} savedUser.getId()
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedUser.getId())
				.toUri();

		// return status code CREATED
		return ResponseEntity.created(location).build();
	}

	@DeleteMapping("/users/{id}")
	public void deleteUser(@PathVariable int id)
	{
		User user = service.deleteById(id);

		if (user == null) throw new UserNotFoundException("id-" + id);
	}
}
